// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using laptoprental.Persistence.Contexts;

namespace laptop_rental.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("LaptopOrder", b =>
                {
                    b.Property<int>("LaptopsId")
                        .HasColumnType("integer");

                    b.Property<int>("OrdersId")
                        .HasColumnType("integer");

                    b.HasKey("LaptopsId", "OrdersId");

                    b.HasIndex("OrdersId");

                    b.ToTable("LaptopOrder");
                });

            modelBuilder.Entity("laptop_rental.Domain.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("cnpj")
                        .HasColumnType("text");

                    b.Property<string>("cpf")
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isLegal")
                        .HasColumnType("boolean");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("laptop_rental.Domain.Models.Laptop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("dailyLateFee")
                        .HasColumnType("numeric");

                    b.Property<decimal>("dailyPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Laptops");
                });

            modelBuilder.Entity("laptop_rental.Domain.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("customerId")
                        .HasColumnType("integer");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("customerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("laptop_rental.Domain.Models.Rent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("orderId")
                        .HasColumnType("integer");

                    b.Property<string>("rentDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("rentExpirationDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("orderId")
                        .IsUnique();

                    b.ToTable("Rents");
                });

            modelBuilder.Entity("LaptopOrder", b =>
                {
                    b.HasOne("laptop_rental.Domain.Models.Laptop", null)
                        .WithMany()
                        .HasForeignKey("LaptopsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("laptop_rental.Domain.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("laptop_rental.Domain.Models.Order", b =>
                {
                    b.HasOne("laptop_rental.Domain.Models.Customer", "customer")
                        .WithMany("orders")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("laptop_rental.Domain.Models.Rent", b =>
                {
                    b.HasOne("laptop_rental.Domain.Models.Order", "order")
                        .WithOne("rent")
                        .HasForeignKey("laptop_rental.Domain.Models.Rent", "orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("order");
                });

            modelBuilder.Entity("laptop_rental.Domain.Models.Customer", b =>
                {
                    b.Navigation("orders");
                });

            modelBuilder.Entity("laptop_rental.Domain.Models.Order", b =>
                {
                    b.Navigation("rent");
                });
#pragma warning restore 612, 618
        }
    }
}
